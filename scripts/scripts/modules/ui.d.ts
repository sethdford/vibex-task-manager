/**
 * ui.js
 * User interface functions for the Vibex Task Manager CLI
 */
/**
 * Display a fancy banner for the CLI
 */
declare function displayBanner(): void;
/**
 * Start a loading indicator with an animated spinner
 * @param {string} message - Message to display next to the spinner
 * @returns {Object} Spinner object
 */
declare function startLoadingIndicator(message: any): import("ora").Ora;
/**
 * Stop a loading indicator (basic stop, no success/fail indicator)
 * @param {Object} spinner - Spinner object to stop
 */
declare function stopLoadingIndicator(spinner: any): void;
/**
 * Complete a loading indicator with success (shows checkmark)
 * @param {Object} spinner - Spinner object to complete
 * @param {string} message - Optional success message (defaults to current text)
 */
declare function succeedLoadingIndicator(spinner: any, message?: any): void;
/**
 * Complete a loading indicator with failure (shows X)
 * @param {Object} spinner - Spinner object to fail
 * @param {string} message - Optional failure message (defaults to current text)
 */
declare function failLoadingIndicator(spinner: any, message?: any): void;
/**
 * Complete a loading indicator with warning (shows warning symbol)
 * @param {Object} spinner - Spinner object to warn
 * @param {string} message - Optional warning message (defaults to current text)
 */
declare function warnLoadingIndicator(spinner: any, message?: any): void;
/**
 * Complete a loading indicator with info (shows info symbol)
 * @param {Object} spinner - Spinner object to complete with info
 * @param {string} message - Optional info message (defaults to current text)
 */
declare function infoLoadingIndicator(spinner: any, message?: any): void;
/**
 * Create a colored progress bar
 * @param {number} percent - The completion percentage
 * @param {number} length - The total length of the progress bar in characters
 * @param {Object} statusBreakdown - Optional breakdown of non-complete statuses (e.g., {pending: 20, 'in-progress': 10})
 * @returns {string} The formatted progress bar
 */
declare function createProgressBar(percent: any, length?: number, statusBreakdown?: any): string;
/**
 * Get a colored status string based on the status value
 * @param {string} status - Task status (e.g., "done", "pending", "in-progress")
 * @param {boolean} forTable - Whether the status is being displayed in a table
 * @returns {string} Colored status string
 */
declare function getStatusWithColor(status: any, forTable?: boolean): any;
/**
 * Format dependencies list with status indicators
 * @param {Array} dependencies - Array of dependency IDs
 * @param {Array} allTasks - Array of all tasks
 * @param {boolean} forConsole - Whether the output is for console display
 * @param {Object|null} complexityReport - Optional pre-loaded complexity report
 * @returns {string} Formatted dependencies string
 */
declare function formatDependenciesWithStatus(dependencies: any, allTasks: any, forConsole?: boolean, complexityReport?: any): string;
/**
 * Display a comprehensive help guide
 */
declare function displayHelp(): void;
/**
 * Get colored complexity score
 * @param {number} score - Complexity score (1-10)
 * @returns {string} Colored complexity score
 */
declare function getComplexityWithColor(score: any): string;
/**
 * Display the next task to work on
 * @param {string} tasksPath - Path to the tasks.json file
 */
declare function displayNextTask(tasksPath: any, complexityReportPath?: any): Promise<void>;
/**
 * Display a specific task by ID
 * @param {string} tasksPath - Path to the tasks.json file
 * @param {string|number} taskId - The ID of the task to display
 * @param {string} [statusFilter] - Optional status to filter subtasks by
 */
declare function displayTaskById(tasksPath: any, taskId: any, complexityReportPath?: any, statusFilter?: any): Promise<void>;
/**
 * Display the complexity analysis report in a nice format
 * @param {string} reportPath - Path to the complexity report file
 */
declare function displayComplexityReport(reportPath: any): Promise<any>;
/**
 * Generate a prompt for complexity analysis
 * @param {Object} tasksData - Tasks data object containing tasks array
 * @returns {string} Generated prompt
 */
declare function generateComplexityAnalysisPrompt(tasksData: any): string;
/**
 * Confirm overwriting existing tasks.json file
 * @param {string} tasksPath - Path to the tasks.json file
 * @returns {Promise<boolean>} - Promise resolving to true if user confirms, false otherwise
 */
declare function confirmTaskOverwrite(tasksPath: any): Promise<boolean>;
/**
 * Displays the API key status for different providers.
 * @param {Array<{provider: string, cli: boolean, mcp: boolean}>} statusReport - The report generated by getApiKeyStatusReport.
 */
declare function displayApiKeyStatus(statusReport: any): void;
/**
 * Displays the currently configured active models.
 * @param {ConfigData} configData - The active configuration data.
 * @param {AvailableModel[]} allAvailableModels - Needed for SWE score tertiles.
 */
declare function displayModelConfiguration(configData: any, allAvailableModels?: any[]): void;
/**
 * Displays the list of available models not currently configured.
 * @param {AvailableModel[]} availableModels - List of available models.
 */
declare function displayAvailableModels(availableModels: any): void;
/**
 * Displays AI usage telemetry summary in the CLI.
 * @param {object} telemetryData - The telemetry data object.
 * @param {string} outputType - 'cli' or 'mcp' (though typically only called for 'cli').
 */
declare function displayAiUsageSummary(telemetryData: any, outputType?: string): void;
export { displayBanner, startLoadingIndicator, stopLoadingIndicator, createProgressBar, getStatusWithColor, formatDependenciesWithStatus, displayHelp, getComplexityWithColor, displayNextTask, displayTaskById, displayComplexityReport, generateComplexityAnalysisPrompt, confirmTaskOverwrite, displayApiKeyStatus, displayModelConfiguration, displayAvailableModels, displayAiUsageSummary, succeedLoadingIndicator, failLoadingIndicator, warnLoadingIndicator, infoLoadingIndicator };
//# sourceMappingURL=ui.d.ts.map